# Udoprog's Build Lib
# This is a wrapper make script that surrounds a build-target in an attempt to make it a bit more
# declarative.

ifndef ROOT
$(error ROOT is not set, are you calling Makefile.build directly?)
endif

export STATE := $(ROOT)/state
export FILES := $(ROOT)/files
export HELPERS := $(ROOT)/helpers

ifndef target-file
$(error target-file is not set)
endif

ifeq ($(DEBUG),yes)
make-opts :=
else
make-opts := -s --no-print-directory
endif

is-distro = $(if $(filter $(1),$(DISTRO)),y,n)
# helpers
missing-file = $(shell test -f $(1) && echo "n" || echo "y")
has-file = $(shell test -f $(1) && echo "y" || echo "n")
has-dir = $(shell test -d $(1) && echo "y" || echo "n")
bin-path = $(shell command -v $(1) 2>&1 /dev/null)
has-command = $(if $(call bin-path,$(1)),"y","n")

target-file := $(realpath $(target-file))
target-dir := $(shell dirname $(target-file))
has-systemd := $(call has-command,systemctl)

# special newline variable
define \n


endef

# create a setup-once rule that conditionally builds a target once if the state file is missing
# variables set up:
# once-state-y - contains all state files that will be created, useful for depending on things that
# should happen after all once have been setup.
define setup-once
missing-$(1) := $$(call missing-file,$$(STATE)/$(1))
build-$$(missing-$(1)) += $$(STATE)/$(1)
steps-$$(missing-$(1)) += $(1)
once-state-$$(missing-$(1)) += $$(STATE)/$(1)

.PHONY: $(1)

$$(STATE)/$(1): | $(1)
	touch $$(STATE)/$(1)
endef

config := $(ROOT)/config.yml
facts := $(ROOT)/facts.yml
hierarchy := $(shell tpl hierarchy)
# common dependencies
cdeps := $(config) $(facts) $(hierarchy)
systemctl := systemctl --user
systemd-user := $(HOME)/.config/systemd/user

link := relative-ln
copy := cp

# default target
all: __all

# unconditional build
build :=
# conditional build, use with `build-$(should-build) += target`
build-y :=
# specialized build targets
sd-unit :=
sd-unit-y :=
sd-timer :=
sd-timer-y :=
steps :=
steps-y :=
post-hook :=
# Targets that should be run once. Target will be set as PHONY.
once :=
# Conditionally build once.
once-y :=
# Additional target makefiles to run.
targets :=

# include target file with build rules
include $(target-file)

sd-unit := $(sd-unit) $(sd-unit-y)
sd-timer := $(sd-timer) $(sd-timer-y)
targets := $(targets) $(targets-y)
once := $(once) $(once-y)

targets := $(filter-out $(EXCLUDE_TARGETS), $(targets))

$(eval \
	$(foreach c,$(once), \
		$(call setup-once,$(c)) $(\n)))

# convert special targets to regular build targets
build-$(has-systemd) += $(sd-unit:%=$(systemd-user)/%)
build-$(has-systemd) += $(sd-service:%=$(systemd-user)/default.target.wants/%)
build-$(has-systemd) += $(sd-timer:%=$(systemd-user)/timers.target.wants/%)
build += $(bins:%=$(BIN)/%)

build := $(build) $(build-y)
steps := $(steps) $(steps-y)

$(HOME)/%: $(ROOT)/home/% $(cdeps) | $(once-state-y)
	tpl render $(ROOT)/home/$* $@

# real entry point
__all: $(ROOT) $(REPO) $(build) $(steps) $(post-hook) $(targets)

$(systemd-user)/default.target.wants/%: $(units)
	$(systemctl) enable $*

$(systemd-user)/timers.target.wants/%: $(units)
	$(systemctl) enable $*

$(targets):
	$(MAKE) $(make-opts) \
		-C $(shell dirname $(target-dir)/$@) \
		-f $(ROOT)/helpers/Makefile.build \
		target-file=$(target-dir)/$@

$(BIN)/%: $(ROOT)/bin/% | $(once-state-y)
	@echo "Linking $@ -> $<"
	$(link) $@ $<

$(config) $(facts) $(hierarchy) $(ROOT):
	@echo "Missing: $@"
	@exit 1

$(REPO):
	mkdir -p $@

.PHONY: all __all $(steps) $(post-hook) $(targets)
