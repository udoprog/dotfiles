#!/usr/bin/env python3

import os
import sys
import stat
import re

try:
    import yaml
except ImportError:
    print('Could not import: yaml', file=sys.stderr)
    print('You might have to install it through:', file=sys.stderr)
    print('$ pip3 install --user pyyaml', file=sys.stderr)
    raise


secrets_template = {
  'template': True,
  'id': 'changeme',
  'secrets': {  }
}


def open_config(root):
    with open(os.path.join(root, 'config.yml')) as f:
        return yaml.load(f)


def open_secrets(root):
    p = os.path.join(root, 'secrets.yml')

    if not os.path.isfile(p):
        with open(p, 'w') as f:
            os.fchmod(f.fileno(), 0o400)
            yaml.dump(secrets_template, f)

        raise Exception(
            ('secrets does not exist, creating an empty one in ' +
             '{}').format(p))

    with open(p, 'r') as f:
        if (os.fstat(f.fileno()).st_mode & 0o777) != 0o400:
            raise Exception(
                ('secrets ({}) must have 0400 permission since it contains ' +
                 'sensitive data!').format(p))

        data = yaml.load(f)

    if 'template' in data:
        raise Exception(
            ('secrets is currently a template, modify it here and remove ' +
             '(template: true): {}').format(p))

    if 'id' not in data:
        raise Exception('secrets does not contain (id: myid)')

    return data


def load_replacements(config, secrets):
    p = config['profiles']

    if secrets['id'] not in p:
        raise Exception('profile ({}) does not exist'.format(secrets['id']))

    secret_id = secrets['id']
    secret_values = secrets['secrets']

    variables = dict(p[secret_id])
    variables.update(secret_values)

    return list((re.compile('[{{][{{]{}[}}][}}]'.format(k)), v) for (k, v) in variables.items())


def replace_all(reps, line):
    string = line

    while True:
        pre = string

        for rep, value in reps:
            string = rep.sub(value, string)

        # something changed
        if string == pre:
            break

    return string


def main(args):
    root = os.path.dirname(os.path.dirname(sys.argv[0]))
    replacements = load_replacements(open_config(root), open_secrets(root))

    target = args[0]
    source = args[1]

    print('{} -> {}'.format(source, target))

    with open(source, 'r') as s:
        with open(target, 'w') as t:
            for line in s:
                  t.write(replace_all(replacements, line))


if __name__ == "__main__":
    main(sys.argv[1:])
