#!/usr/bin/env python3

import os
import sys
import stat
import re

try:
    import yaml
except ImportError:
    print('Could not import: yaml', file=sys.stderr)
    print('You might have to install it through:', file=sys.stderr)
    print('$ pip3 install --user pyyaml', file=sys.stderr)
    raise


VALID_VAR = re.compile('^[a-zA-Z_.]+$')


secrets_mode = 0o600


secrets_template = {
  'template': True,
  'id': 'changeme',
  'secrets': {  }
}


def open_config(root):
    path = os.path.join(root, 'config.yml')

    with open(path) as f:
        data = yaml.load(f)

    try:
        profiles = data['profiles']
    except IndexError:
        raise Exception('{}: does not contain .profiles'.format(path))

    try:
        variables = data['variables']
    except IndexError:
        raise Exception('{}: does not contain .variables'.format(path))

    try:
        secret_keys = data['secrets']
    except IndexError:
        raise Exception('{}: does not contain .secrets'.format(path))

    return path, profiles, variables, secret_keys


def open_secrets(root):
    path = os.path.join(root, 'secrets.yml')

    if not os.path.isfile(path):
        with open(path, 'w') as f:
            os.fchmod(f.fileno(), secrets_mode)
            yaml.dump(secrets_template, f)

        raise Exception(
            ('secrets does not exist, creating an empty one in ' +
             '{}').format(path))

    with open(path, 'r') as f:
        if (os.fstat(f.fileno()).st_mode & 0o777) != secrets_mode:
            raise Exception(
                ('secrets ({}) must have {} permission since it contains ' +
                 'sensitive data!').format(path, oct(secrets_mode)))

        data = yaml.load(f)

    if 'template' in data:
        raise Exception(
            ('secrets is currently a template, modify it here and remove ' +
             '(template: true): {}').format(path))

    try:
        profile_id = data['id']
    except KeyError:
        raise Exception('{}: does not contain .id'.format(path))

    try:
        secrets = data['secrets']
    except KeyError:
        raise Exception('{}: does not contain .secrets'.format(path))

    if type(secrets) != dict:
        raise Exception('{}: .secrets is not a dictionary'.format(path))

    return path, profile_id, secrets


def load_replacements(profiles, secrets):
    c_path, profiles, variables, secret_keys = profiles
    s_path, profile_id, secrets = secrets

    variables = dict(variables)
    secrets = dict(secrets)

    try:
        variables.update(profiles[profile_id])
    except KeyError:
        raise Exception('{}: does not contain profile ({})'.format(c_path, profile_id))

    for k in secret_keys:
        if not VALID_VAR.match(k):
            raise Exception('{}: secret ({}) contains illegal characters, valid ones are: [_a-zA-Z.]'.format(s_path, k))

        try:
            variables[k] = secrets.pop(k)
        except KeyError:
            raise Exception('{}: secret ({}) is not available'.format(s_path, k))

    k = k.replace('.', '\\.').replace('[', '\\[').replace(']', '\\]')
    return list((re.compile('[{{][{{]{}[}}][}}]'.format(k)), v) for (k, v) in variables.items())


def replace_all(reps, line):
    string = line

    while True:
        pre = string

        for rep, value in reps:
            string = rep.sub(value, string)

        # something changed
        if string == pre:
            break

    return string


def main(args):
    root = os.path.dirname(os.path.dirname(sys.argv[0]))
    replacements = load_replacements(open_config(root), open_secrets(root))

    target = args[0]
    source = args[1]
    target_dir = os.path.dirname(target)

    if not os.path.isdir(target_dir):
        print('creating directory: {}', target_dir)
        os.makedirs(target_dir)

    print('{} -> {}'.format(source, target))

    with open(source, 'r') as s:
        with open(target, 'w') as t:
            for line in s:
                  t.write(replace_all(replacements, line))


if __name__ == "__main__":
    main(sys.argv[1:])
