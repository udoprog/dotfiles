#!/usr/bin/env python3

import argparse
import os
import sys
import stat
import re
from string import Template

from pystache.renderer import Renderer
import yaml

class Lookup(object):
    def __init__(self, renderer, root, scoped):
        self._renderer = renderer
        self._root = root
        self._scoped = scoped

    def _render(self, template):
        return self._renderer.render(template, self)

    def _keys(self, name):
        value = self

        for p in name.split('.'):
            value = value.__getattr__(p)

        if not isinstance(value._scoped, dict):
            raise Exception('not a dict')

        return value._scoped.keys()

    def __getattr__(self, name):
        if name == 'items()':
            return [{
                'key': key,
                'value': Lookup(self._renderer, self._root, value),
            } for (key, value) in self._scoped.items()]

        if name == '':
            value = self._root
        else:
            value = self._scoped[name]

        return Lookup(self._renderer, self._root, value)

    def __str__(self):
        return str(self._scoped)

def setup_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('--scope', dest='scopes', action='append', default=[])
    parser.add_argument('--set', metavar='<key>=<value>', dest='values', type=lambda v: v.split('=', 2), action='append', default=[])

    sp = parser.add_subparsers()

    render = sp.add_parser('render')
    render.add_argument('source')
    render.add_argument('target')
    render.set_defaults(action=render_action)

    render = sp.add_parser('keys')
    render.add_argument('name')
    render.set_defaults(action=keys_action)

    return parser

def apply_scopes(db, scopes):
    result = dict()

    for scope in scopes:
        current = db

        for p in scope.split('.'):
            p = p.strip()

            if len(p) <= 0:
                continue

            try:
                current = current[p]
            except:
                raise Exception('bad scope: {}'.format(scope))

        result.update(current)

    return result

def merge(target, key, value):
    if isinstance(value, dict):
        if not isinstance(target, dict):
            raise Exception('target: not a dict')

        try:
            t = target[key]
        except KeyError:
            target[key] = t = dict()

        for (k, v) in value.items():
            merge(t, k, v)

        return

    if isinstance(value, list):
        if not isinstance(target, list):
            raise Exception('target: not a list')

        target.extend(value)
        return

    if key not in target:
        target[key] = value

def load_lookup(ns):
    renderer = Renderer(missing_tags='strict')

    config = os.path.join(ns.root, 'config.yml')
    facts = os.path.join(ns.root, 'facts.yml')

    c = yaml.load(open(config))
    f = yaml.load(open(facts))

    f['distro'] = os.getenv('DISTRO')

    hierarchy = c.get('hierarchy')

    if hierarchy is not None and isinstance(hierarchy, list):
        hierarchy = [os.path.join(ns.root, renderer.render(h, f)) for h in hierarchy]
    else:
        raise Exception(config + ": missing hierarchy")

    root = dict()

    for h in hierarchy:
        if not os.path.isfile(h):
            continue

        for (k, v) in yaml.load(open(h)).items():
            merge(root, k, v)

    root['HOME'] = os.path.expanduser('~')
    root['REPO'] = os.environ.get('REPO')
    root['BIN'] = os.environ.get('BIN')

    scoped = root

    if len(ns.scopes) > 0:
        scoped = apply_scopes(root, ns.scopes)

    for (key, value) in ns.values:
        scoped[key] = value

    return Lookup(renderer, root, scoped)

def setup_lookup(ns):
    ns.root = os.getenv('ROOT')

    if ns.root is None:
        raise Exception('ROOT: missing environment variable')

    return load_lookup(ns)

def keys_action(ns):
    lookup = setup_lookup(ns)

    for key in lookup._keys(ns.name):
        print(key)

def render_action(ns):
    lookup = setup_lookup(ns)

    source = ns.source
    target = ns.target
    target_dir = os.path.dirname(os.path.abspath(target))

    if not os.path.isdir(target_dir):
        print('creating directory: {}'.format(target_dir))
        os.makedirs(target_dir)

    print('{} â†’  {}'.format(source, target))

    with open(source, 'r') as s:
        template = s.read()

        try:
            out = lookup._render(template)
        except Exception as e:
            raise Exception('{}: {}'.format(source, e))

    with open(target, 'w') as t:
        t.write(out)

if __name__ == "__main__":
    parser = setup_parser()
    ns = parser.parse_args()
    ns.action(ns)
