#!/usr/bin/env python3

import os
import sys
import stat
import re
from string import Template

from pystache.renderer import Renderer
import yaml

def load_lookup(root, renderer):
    config = os.path.join(root, 'config.yml')
    facts = os.path.join(root, 'facts.yml')

    c = yaml.load(open(config))
    f = yaml.load(open(facts))

    f['distro'] = os.getenv('DISTRO')

    hierarchy = c.get('hierarchy')

    if hierarchy is not None and isinstance(hierarchy, list):
        hierarchy = [os.path.join(root, renderer.render(h, f)) for h in hierarchy]
    else:
        raise Exception(config + ": missing hierarchy")

    db = dict()

    for h in hierarchy:
        if not os.path.isfile(h):
            continue

        for (k, v) in yaml.load(open(h)).items():
            if k not in db:
                db[k] = v

    db['HOME'] = os.path.expanduser('~')
    db['REPO'] = os.environ.get('REPO')
    db['BIN'] = os.environ.get('BIN')
    return Lookup(db)

class Lookup(object):
    def __init__(self, db):
        self.__db = db

    def __getattr__(self, name):
        return self.__db[name]

def main(args):
    root = os.getenv('ROOT')

    if root is None:
        raise Exception('ROOT: missing environment variable')

    renderer = Renderer(missing_tags='strict')
    lookup = load_lookup(root, renderer)

    if len(args) != 2:
        raise Exception('Usage: m4tpl <source> <target>')

    source = args[0]
    target = args[1]
    target_dir = os.path.dirname(os.path.abspath(target))

    if not os.path.isdir(target_dir):
        print('creating directory: {}'.format(target_dir))
        os.makedirs(target_dir)

    print('{} â†’  {}'.format(source, target))

    with open(source, 'r') as s:
        template = s.read()

        try:
            out = renderer.render(template, lookup)
        except Exception as e:
            raise Exception('{}: {}'.format(source, e))

    with open(target, 'w') as t:
        t.write(out)

if __name__ == "__main__":
    main(sys.argv[1:])
