" vim: sw=2 foldmethod=marker

" {{{ Bundles
source ~/.vim/bundles.vim
""" }}}

" {{{ Basic Settings
syntax enable
filetype plugin on
filetype indent on

colorscheme molokai

set t_Co=256
set sw=4
set tabstop=4
set number
set expandtab
set modelines=5
set novisualbell
set t_vb=
set updatetime=1000
set laststatus=2
set history=1000
set autoindent
set autoread
set autowrite
set backspace=indent,eol,start
set cursorline
set dictionary=/usr/share/dict/words
set encoding=utf-8
set fillchars=diff:⣿,vert:│
set gdefault
set hidden
set hlsearch
set ignorecase
set incsearch
set lazyredraw
set linebreak
set list
set listchars=tab:▸\ ,trail:¬,extends:❯,precedes:❮
set matchtime=3
set modeline
set ruler
set scrolloff=3
set shiftround
set showbreak=↪
set showcmd
set showmatch
set showmode
set smartcase
set splitbelow
set splitright
set title
set ttyfast
set wildmenu
set wildmode=list:longest
" Don't try to highlight lines longer than 800 characters.
set synmaxcol=800
" Time out on key codes but not mappings
set notimeout
set ttimeout
set ttimeoutlen=1
" Make Vim able to edit crontab files again.
set backupskip=/tmp/*,/private/tmp/*"
" Better Completion
set complete=.,w,b,u,t
set completeopt=longest,menuone,preview
"Make line wrapping act sanely
set wrap
set textwidth=99
set formatoptions=qrn1
set colorcolumn=100

set wildignore+=**/.svn
set wildignore+=*.class
set wildignore+=**/tmp

set spell spelllang=en_us
set dictionary=/usr/share/dict/words
set spellfile=~/.vim/dictionary.add

let mapleader = ","
let maplocalleader = '\'

if exists('+colorcolumn')
  set colorcolumn=+1
endif

if exists('+undofile')
  set undofile
  set undoreload=10000
endif

if exists('+relativenumber')
  nnoremap <leader>l :set relativenumber!<cr>
else
  nnoremap <leader>l :set number!<cr>
endif

" Save when losing focus
au FocusLost * :silent! wall

" Resize splits when the window is resized
au VimResized * :wincmd =

" Custom Highlights
highlight NonText guifg=#909090
highlight SpecialKey guifg=#909090

" Improved search
nnoremap / /\v
vnoremap / /\v
nnoremap <leader><space> :noh<CR>

" Highlight trailing whitespace.
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

" tab navigation like firefox
nmap <C-h> :tabp<CR>
nmap <C-l> :tabn<CR>
" }}}

" {{{ Plugin Settings
let g:deoplete#enable_at_startup = 1
let g:vim_markdown_folding_disabled = 1

let NERDTreeIgnore=['\.o$', '\.pyc$', '\~$']
let g:ackprg="ack-grep -H --nocolor --nogroup --column"

" {{{ Airline
let g:airline_powerline_fonts = 1
" }}}

" {{{ Syntastic
if exists("g:loaded_syntastic_plugin")
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*

  let g:syntastic_auto_loc_list = 1
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0

  let g:syntastic_javascript_checkers = ['jshint']
  let g:syntastic_cpp_compiler = 'g++'
  let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++'
endif
" }}}

nnoremap <leader>t :CommandT<cr>
nnoremap <leader>r :NERDTreeFind<cr>
map <F2> :NERDTreeToggle<CR>
" }}}

" {{{ FileType Setup
function! SetupJava()
  set path=src/main/java,src/test/java,$JAVA_HOME/src
  set suffixesadd=.java
endfunction

function! SetupPHP()
  set noexpandtab
  set suffixesadd=.php
endfunction

function! SetupPython()
  nmap <leader>d :!pydoc <cfile><CR>
  set suffixesadd=.py
endfunction

function! SetupRuby()
  set tabstop=2
  set shiftwidth=2
  set suffixesadd=.rb
endfunction

function! SetupEPL()
  set filetype=sql
endfunction

function! SetupNGT()
  set tabstop=2
  set shiftwidth=2
  set filetype=html
  set suffixesadd=.ngt
endfunction

function! SetupPOM()
  set tabstop=2
  set shiftwidth=2
  set filetype=xml
  set expandtab
endfunction

function! SetupRust()
  "compiler cargo
  let g:rustfmt_autosave = 1
  let g:racer_experimental_completer = 1
  set hidden
  let g:racer_cmd = resolve(expand("~/.cargo/bin/racer"))
  let $RUST_SRC_PATH = resolve(expand("~/repo/rust/src"))
  set expandtab

  nmap gd <Plug>(rust-def)
  nmap gs <Plug>(rust-def-split)
  nmap gx <Plug>(rust-def-vertical)
  nmap <leader>gd <Plug>(rust-doc)
endfunction

function! SetupClojure()
  au VimEnter * RainbowParenthesesToggle
  au Syntax * RainbowParenthesesLoadRound
  au Syntax * RainbowParenthesesLoadSquare
  au Syntax * RainbowParenthesesLoadBraces
endfunction

function! SetupASM()
  set tabstop=4
  set shiftwidth=4
  set noexpandtab
endfunction

function! SetupJavaScript()
  set tabstop=2
  set shiftwidth=2
  set expandtab
endfunction

function! SetupJSX()
  set tabstop=2
  set shiftwidth=2
  set expandtab
  let g:syntastic_javascript_checkers = ['eslint']
endfunction

function! SetupTSX()
  set tabstop=2
  set shiftwidth=2
  set expandtab
  let g:syntastic_javascript_checkers = ['eslint']
endfunction

function! SetupTS()
  set tabstop=2
  set shiftwidth=2
  set expandtab
  let g:syntastic_typescript_checkers = ['eslint']
endfunction

function! SetupTSDefs()
  set tabstop=2
  set shiftwidth=2
  set expandtab
  let g:syntastic_typescript_checkers = ['eslint']
endfunction

if has("autocmd")
  " do all autocmd stuff here
  " autocmd FileType javascript <cmd>
  autocmd BufNewFile * silent! 0r ~/.vim/skel/tmpl.%:e
  autocmd BufNewFile,BufRead *.java :call SetupJava()
  autocmd BufNewFile,BufRead *.py :call SetupPython()
  autocmd BufNewFile,BufRead *.php :call SetupPHP()
  autocmd BufNewFile,BufRead *.rb :call SetupRuby()
  autocmd BufNewFile,BufRead *.epl :call SetupEPL()
  autocmd BufNewFile,BufRead *.pp set filetype=puppet
  autocmd BufNewFile,BufRead *.ngt :call SetupNGT()
  autocmd BufNewFile,BufRead *.rs :call SetupRust()
  autocmd BufNewFile,BufRead *.clj :call SetupClojure()
  autocmd BufNewFile,BufRead *.s :call SetupASM()
  autocmd BufNewFile,BufRead *.S :call SetupASM()
  autocmd BufNewFile,BufRead *.js :call SetupJavaScript()
  autocmd BufNewFile,BufRead *.jsx :call SetupJSX()
  autocmd BufNewFile,BufRead *.tsx :call SetupTSX()
  autocmd BufNewFile,BufRead *.d.ts :call SetupTSDefs()
  autocmd BufNewFile,BufRead *.ts :call SetupTS()
  autocmd BufNewFile,BufRead pom.xml :call SetupPOM()

  autocmd! BufWritePost *.rs Neomake cargo
endif
" }}}

" {{{ Learn Vim The Hard Way
" Learn vim the hard way.
" Disable movement keys and escape.
noremap <Left> <NOP>
inoremap <Left> <NOP>
noremap <Right> <NOP>
inoremap <Right> <NOP>
noremap <Up> <NOP>
inoremap <Up> <NOP>
noremap <Down> <NOP>
inoremap <Down> <NOP>

" Escape remapping to tab.
inoremap jk <Esc>
" }}}

" {{{ source project-specific settings
if filereadable('./.pvimrc')
  source ./.pvimrc
endif

if isdirectory('./include')
  let &path=getcwd() . '/include' . ',' . &path
endif
" }}}

" {{{ cscope
set cscopetag

if filereadable('cscope.out')
  cs add cscope.out
endif
" }}}

" {{{ language client
let g:LanguageClient_serverCommands = {
    \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
    \ }

" Automatically start language servers.
let g:LanguageClient_autoStart = 1

nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
" }}}
